// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RecordStatsServiceClient is the client API for RecordStatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordStatsServiceClient interface {
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type recordStatsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordStatsServiceClient(cc grpc.ClientConnInterface) RecordStatsServiceClient {
	return &recordStatsServiceClient{cc}
}

func (c *recordStatsServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, "/recordstats.RecordStatsService/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordStatsServiceServer is the server API for RecordStatsService service.
// All implementations should embed UnimplementedRecordStatsServiceServer
// for forward compatibility
type RecordStatsServiceServer interface {
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
}

// UnimplementedRecordStatsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRecordStatsServiceServer struct {
}

func (UnimplementedRecordStatsServiceServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}

// UnsafeRecordStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordStatsServiceServer will
// result in compilation errors.
type UnsafeRecordStatsServiceServer interface {
	mustEmbedUnimplementedRecordStatsServiceServer()
}

func RegisterRecordStatsServiceServer(s grpc.ServiceRegistrar, srv RecordStatsServiceServer) {
	s.RegisterService(&_RecordStatsService_serviceDesc, srv)
}

func _RecordStatsService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordStatsServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordstats.RecordStatsService/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordStatsServiceServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordStatsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recordstats.RecordStatsService",
	HandlerType: (*RecordStatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStats",
			Handler:    _RecordStatsService_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordstats.proto",
}
